[{"C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\index.js":"1","C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\components\\Navigation.js":"2","C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\pages\\index.js":"3","C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\pages\\TrigRatios.js":"4","C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\pages\\Home.js":"5","C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\pages\\DrawTriangles.js":"6","C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\components\\SCTFormulas.js":"7","C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\components\\TriangleDimensions.js":"8","C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\components\\AnswerBox.js":"9","C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\components\\Hints.js":"10"},{"size":820,"mtime":1650928149358,"results":"11","hashOfConfig":"12"},{"size":606,"mtime":1654276826852,"results":"13","hashOfConfig":"12"},{"size":166,"mtime":1650928165843,"results":"14","hashOfConfig":"12"},{"size":4518,"mtime":1654283048820,"results":"15","hashOfConfig":"12"},{"size":1138,"mtime":1654277028955,"results":"16","hashOfConfig":"12"},{"size":4914,"mtime":1650928856936,"results":"17","hashOfConfig":"12"},{"size":812,"mtime":1650915559061,"results":"18","hashOfConfig":"12"},{"size":3033,"mtime":1654281530625,"results":"19","hashOfConfig":"12"},{"size":2801,"mtime":1654208376002,"results":"20","hashOfConfig":"12"},{"size":660,"mtime":1653686606713,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16njlc8",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\index.js",[],[],"C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\components\\Navigation.js",[],[],"C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\pages\\index.js",[],[],"C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\pages\\TrigRatios.js",["54"],[],"C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\pages\\Home.js",[],[],"C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\pages\\DrawTriangles.js",["55"],[],"import { Col, Row, Container, Stack, Tooltip, Button, OverlayTrigger, Table, Form } from \"react-bootstrap\";\r\nimport { React } from \"react\";\r\nimport Triangle from \"../components/Triangle.PNG\";\r\n\r\nfunction DrawTriangles( ) {\r\n\r\n    const tooltip1 = (props) => (\r\n        <Tooltip id=\"button-tooltip\" {...props}>\r\n            Use the measurements I entered above to create a custom triangle.\r\n        </Tooltip>\r\n    )\r\n\r\n    const tooltip2 = (props) => (\r\n        <Tooltip id=\"button-tooltip\" {...props}>\r\n            Generate a triangle of any size or shape.\r\n        </Tooltip>\r\n    )\r\n\r\n    const helpTooltip = (props) => (\r\n        <Tooltip id=\"button-tooltip\" {...props}>\r\n            A triangle can be created by filling in any 3 measurements in the table below.\r\n            The tool will fill in the remaining 3 measurements to complete your triangle.\r\n            Remember that all angles of a triangle must add to 180 degrees!\r\n            If you would like, you can skip this step and create a random triangle with the \r\n            \"Show me a random triangle\" button below.\r\n        </Tooltip>\r\n    )\r\n\r\n    return (\r\n        <Container fluid>\r\n            <h1>Triangle Drawing Tool</h1>\r\n            <Row>\r\n                <Col sm={8}><img src={Triangle} /></Col>\r\n                <Col sm={4}>\r\n                    <Stack gap={4}>\r\n                        <br></br>\r\n                        <OverlayTrigger   \r\n                            placement=\"left\"\r\n                            overlay={helpTooltip}\r\n                        >\r\n                            <Button variant=\"info\">How do I create a triangle?</Button>\r\n                        </OverlayTrigger>\r\n                        <Table bordered>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colSpan=\"2\">\r\n                                        Triangle Dimensions\r\n                                    </th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>\r\n                                        Side/Angle\r\n                                    </th>\r\n                                    <th>\r\n                                        Measurement\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>side A</td>\r\n                                    <td><Form.Control placeholder=\"enter a side length\"></Form.Control></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>side B</td>\r\n                                    <td><Form.Control placeholder=\"enter a side length\"></Form.Control></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>side C</td>\r\n                                    <td><Form.Control placeholder=\"enter a side length\"></Form.Control></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>angle a</td>\r\n                                    <td><Form.Control placeholder=\"enter an angle size\"></Form.Control></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>angle b</td>\r\n                                    <td><Form.Control placeholder=\"enter an angle size\"></Form.Control></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>angle c</td>\r\n                                    <td><Form.Control placeholder=\"enter an angle size\"></Form.Control></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    </Stack>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col sm={{ span: 6, offset: 1 }}>\r\n\r\n                </Col>\r\n                <Col sm={{ span: 3, offset: 1 }}>\r\n                    <Stack gap={5}>\r\n                    <OverlayTrigger   \r\n                            placement=\"left\"\r\n                            overlay={tooltip1}\r\n                        >\r\n                            <Button variant=\"warning\">Build my triangle</Button>\r\n                        </OverlayTrigger>\r\n                        <OverlayTrigger   \r\n                            placement=\"left\"\r\n                            overlay={tooltip2}\r\n                        >\r\n                            <Button variant=\"warning\">Show me a random triangle</Button>\r\n                        </OverlayTrigger>\r\n                    </Stack>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default DrawTriangles;","C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\components\\SCTFormulas.js",["56"],[],"import { React, useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport Formulas from \"./Formulas.PNG\";\r\nimport FormulasBlank from \"./FormulasBlank.PNG\";\r\n\r\nfunction SCTFormulas() {\r\n    const images = {Formulas, FormulasBlank};\r\n    const [formulaToggle, setFormulaToggle] = useState(images.Formulas);\r\n\r\n    const toggleFormulas = () => {\r\n        if (formulaToggle === Formulas) {\r\n            setFormulaToggle(FormulasBlank)\r\n        } else {\r\n            setFormulaToggle(Formulas)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form>\r\n            <img src={formulaToggle} />\r\n            <Form.Check\r\n                type=\"switch\"\r\n                label=\"toggle formulas\"\r\n                onClick={toggleFormulas}\r\n            />\r\n\r\n        </Form>\r\n    )\r\n};\r\n\r\nexport default SCTFormulas;","C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\components\\TriangleDimensions.js",["57"],[],"C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\components\\AnswerBox.js",[],[],"C:\\Users\\ellis\\Programming\\CS_361\\MVP\\client\\src\\components\\Hints.js",["58","59","60","61","62","63"],[],{"ruleId":"64","severity":1,"message":"65","line":52,"column":25,"nodeType":"66","endLine":52,"endColumn":47},{"ruleId":"64","severity":1,"message":"65","line":33,"column":29,"nodeType":"66","endLine":33,"endColumn":51},{"ruleId":"64","severity":1,"message":"65","line":20,"column":13,"nodeType":"66","endLine":20,"endColumn":40},{"ruleId":"67","severity":1,"message":"68","line":33,"column":8,"nodeType":"69","endLine":33,"endColumn":18,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"75","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"71","severity":1,"message":"76","line":2,"column":19,"nodeType":"73","messageId":"74","endLine":2,"endColumn":23},{"ruleId":"71","severity":1,"message":"77","line":2,"column":33,"nodeType":"73","messageId":"74","endLine":2,"endColumn":38},{"ruleId":"71","severity":1,"message":"78","line":2,"column":40,"nodeType":"73","messageId":"74","endLine":2,"endColumn":43},{"ruleId":"71","severity":1,"message":"79","line":2,"column":45,"nodeType":"73","messageId":"74","endLine":2,"endColumn":48},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'showDimensions'. Either include it or remove the dependency array.","ArrayExpression",["80"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Form' is defined but never used.","'Toast' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.",{"desc":"81","fix":"82"},"Update the dependencies array to be: [showDimensions, triangle]",{"range":"83","text":"84"},[1113,1123],"[showDimensions, triangle]"]